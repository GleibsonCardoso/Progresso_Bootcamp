# -*- coding: utf-8 -*-
"""analises_pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cnAyfdvObw3xTY9AKb89cfmWs-mIQRrS
"""

#importando a biblioteca
import pandas as pd

# leitura de arquivos
df1 = pd.read_excel("Aracaju.xlsx")
df2 = pd.read_excel("Fortaleza.xlsx")
df3 = pd.read_excel("Natal.xlsx")
df4 = pd.read_excel("Recife.xlsx")
df5 = pd.read_excel("Salvador.xlsx")

#juntando todos os arquivos

df = pd.concat([df1, df2,df3,df4,df5])

#visualizando as 05 primeiros linhas
df.head()

df.tail()

df.dtypes

df.sample(5)

df["LojaID"] = df["LojaID"].astype("object")

df.dtypes

"""**Trabalhando valores faltantes**"""

df.isnull().sum()

df["Vendas"].fillna(df["Vendas"].mean(), inplace = True)

df.isnull().sum()

# Para esses arquivos não existem valores nulos

df["Receita"] = df["Vendas"].mul(df["Qtde"])

df.head()

df["Receitas/Vendas"] = df["Receita"] / df["Vendas"]

df.head()

df["Receita"].min()

df["Receita"].max()

df.nlargest(3, "Receita")

df.nsmallest(3, "Receita")

df.groupby("Cidade")["Receita"].sum()

df.sort_values("Receita", ascending=False).head(10)

# Transformando em datas
df["Data"] = pd.to_datetime(df["Data"])

df.dtypes

#agrupamento por ano
df.groupby(df["Data"].dt.year)["Receita"].sum()

#Criando uma nova coluna com o ano

df["Ano_Venda"] = df["Data"].dt.year

df.sample(5)

#Extraindo o mês e o dia 

df["mes_venda"], df["dia_venda"] = (df["Data"].dt.month, df["Data"].dt.day)

df.sample(5)

#Retornando a data mais antiga
df["Data"].min()

#calculando a diferença entre dias

df["diferença_dias"] = df["Data"] - df["Data"].min()

df.sample(5)

#Criando coluna trimestre

df["trimeste_vendas"] = df["Data"].dt.quarter

df.sample(5)

#Filtrando as vendas de 2019 do mês de março

vendas_marco_19 = df.loc[(df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3)]

vendas_marco_19

"""#**Visualização de dados**"""

df["LojaID"].value_counts(ascending=False)

#Barras verticais
df["LojaID"].value_counts(ascending=False).plot.bar()

#Barras horizontais

df["LojaID"].value_counts(ascending=False).plot.barh()

df["LojaID"].value_counts(ascending=True).plot.barh(); #ordenado

#Gráfico de pizza
df.groupby(df["Data"].dt.year)["Receita"].sum().plot.pie();

#Total de vandas por cidade

df["Cidade"].value_counts()

#Formatando o gráfico

import matplotlib.pyplot as plt

df["Cidade"].value_counts().plot.bar(title="Total Vendas por Cidade", color = "red")
plt.xlabel("Cidade")
plt.ylabel("Total de vendas")
plt.style.use("ggplot")

df.groupby(df["mes_venda"])["Qtde"].sum().plot(title = "Total de produtos vendidos por mês")
plt.xlabel("Mês")
plt.ylabel("Total Produtos vendidos")
plt.legend()

df.groupby(df["mes_venda"])["Qtde"].sum()

df_2019 = df[df["Ano_Venda"] == 2019]

df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.xlabel("Mês")
plt.ylabel("Total de produtos vendidos")
plt.legend()

plt.hist(df["Qtde"], color = "green");

plt.scatter(x=df_2019["dia_venda"], y = df_2019["Receita"])

df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.title("Quantidade de produtod vendidos por mês")
plt.xlabel("Mês")
plt.ylabel("Total de produtos vendidos")
plt.legend()
plt.savefig("grafico QTDE x MES.png")

